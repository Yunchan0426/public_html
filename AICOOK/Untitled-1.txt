#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>

using namespace std;

class TrieNode {
public:
    TrieNode* children[26];
    bool EOW;

    TrieNode() {
        EOW = false;
        for (int i = 0; i < 26; i++) {
            children[i] = nullptr;
        }
    }

    ~TrieNode() {
        for (int i = 0; i < 26; i++) {
            if (children[i] != nullptr) {
                delete children[i];
            }
        }
    }
};

void insert(TrieNode* root, const std::string& word) {
    TrieNode* curr = root;

    for (char c : word) {
        // Add robustness: ignore characters that are not lowercase letters
        if (c < 'a' || c > 'z') {
            continue;
        }
        int index = c - 'a';
        if (curr->children[index] == nullptr) {
            TrieNode* newNode = new TrieNode();

            curr->children[index] = newNode;
        }
        curr = curr->children[index];
    }
    // Only mark as a word if it contained at least one valid character
    if (curr != root) {
        curr->EOW = true;
    }
};

bool search(TrieNode* root, const std::string& word) {
    TrieNode* curr = root;

    for (char c : word) { // for all letter c in word (with conserving the order of `word`)
        // If a character is invalid, the word cannot exist in our Trie
        if (c < 'a' || c > 'z') {
            return false;
        }
        int index = c - 'a';
        if (curr->children[index] == nullptr) { // if letter c doesn't exist in the children of curr
            return false; // return false
        }
        curr = curr->children[index]; // if not, move to the corresponding children, and do the loop again
    }
    return curr->EOW;
};

bool prefix(TrieNode* root, const std::string& word) {
    TrieNode* curr = root;

    for (char c : word) {
        // If a character is invalid, it cannot be a prefix
        if (c < 'a' || c > 'z') {
            return false;
        }
        int index = c - 'a';
        if (curr->children[index] == nullptr) {
            return false;
        }
        curr = curr->children[index];
    }
    return true;
};

int main() {
    TrieNode* root = new TrieNode();
    vector<string> wordOrigin;
    string wordFromFile;
    ifstream wordFile("words.txt");

    if (!wordFile.is_open()) {
        cerr << "Error: Could not open words.txt" << endl;
        return 1; // Exit with an error
    }

    // Correctly read all words from the file into the vector
    while (wordFile >> wordFromFile) {
        wordOrigin.push_back(wordFromFile);
    }
    wordFile.close();

    // Now, populate the Trie with the words from the vector
    for (const string& word : wordOrigin) {
        insert(root, word);
    }

    cout << "Trie populated successfully with " << wordOrigin.size() << " words." << endl;
    // The 'left' and 'right' variables were unused and caused the bug, so they are removed.

    delete root; // Free the allocated memory to prevent leaks
    return 0;    // Indicate successful program execution
}